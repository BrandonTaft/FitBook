//Delete Profile
    // const handleUserDelete = (user) => {
    //     fetch(`http://localhost:8080/api/things/${user.id}`, {
    //         method: 'DELETE'
    //     }).then(response => response.json())
    //         .then(result => {
    //             if (result.success) {
    //                 props.history.push('/login')

    //             }

    //         })

    // }

    //if (persistedUser) {
        //     const name = req.body.name
        //     const userAccounts = accounts.filter(account => account.name == name)
        //     res.json(userAccounts)
        //             })else {
        //                 //User does not exist
        //                 res.json({ success: false, message: 'User does not exist' })
        //             }
        //         } else {
        //             // If decoding fails
        //             res.status(401).json({ success: false, message: 'No Authorization Headers Found!!!' })
        //         }
        //}catch (error) {
        //res.status(401).json({ success: false, message: 'Token Has Been Tampered With!!!' })
        // }
        
        //SERVER PROFILE PAGE
        //const persistedUser = users.find((user) => user.name == name)
        <React.StrictMode>
    <BrowserRouter>
    <BaseLayout>
    <Switch>
    <Route exact path = "/register"component = {Register} />
    <Route exact path = "/" component = {Login} />
    <div>
    <Provider store = {store}>
    <AllThings />
    </Provider>
    <Menu />
    <Route exact path = "/allthings" component = {AllThings} />
    <Route exact path = "/mythings" component = {MyThings} />
    <Route exact path = "/addthings" component = {AddThings} />
    <Route exact path = "/profilepage" component = {ProfilePage} />
    <Route exact path = "/logout" component = {Logout} />
   </div>
    </Switch>
    </BaseLayout>
    </BrowserRouter>
  </React.StrictMode>,
  document.getElementById('root')
);

ReactDOM.render(
    <React.StrictMode>
      {/* <BrowserRouter>
      <BaseLayout>
      <Switch>
      <Route exact path = "/register"component = {Register} />
      <Route exact path = "/" component = {Login} />
     
      <Provider store = {store}>
      <AllThings />
      </Provider>
     
      <Route exact path = "/allthings" component = {AllThings} />
      <Route exact path = "/mythings" component = {MyThings} />
      <Route exact path = "/addthings" component = {AddThings} />
      <Route exact path = "/profilepage" component = {ProfilePage} />
      <Route exact path = "/logout" component = {Logout} />
      </Switch>
      </BaseLayout>
      </BrowserRouter> */}
     <BrowserRouter>
     <BaseLayout>
     <Switch>
    <Provider store = {store}>
      <AllThings />
      </Provider>
      </Switch>
      </BaseLayout>
      </BrowserRouter>
    </React.StrictMode>,
    document.getElementById('root')
  );
  import {composeWithDevTools} from 'redux-devtools-extension'

  {/* <BrowserRouter>
    <BaseLayout>
    <Switch>
    <Route exact path = "/register"component = {Register} />
    <Route exact path = "/" component = {Login} />
   
    <Provider store = {store}>
    <AllThings />
    </Provider>
   
    <Route exact path = "/allthings" component = {AllThings} />
    <Route exact path = "/mythings" component = {MyThings} />
    
    <Route exact path = "/profilepage" component = {ProfilePage} />
    
    </Switch>
    </BaseLayout>
    </BrowserRouter> */}
    <BrowserRouter>
    <BaseLayout>
    <Switch>
    <Provider store = {store}>
    <Route exact path = "/register"component = {Register} />
    <Route exact path = "/" component = {Login} />
   
   
    
      <Route exact path = "/logout" component = {Logout} />
     <Route exact path = "/addthings" component = {AddThings} />
     
    
     <AllThings />
     
     <Route exact path = "/logout" component = {Logout} />
     <Route exact path = "/addthings" component = {AddThings} />
      
     
     </Provider>
     </Switch>
     </BaseLayout>
     </BrowserRouter>
   </React.StrictMode>,
   document.getElementById('root')
   

   //useEffect(() => {
       
        // fetch('http://localhost:8080/api/publicthings')
        //     .then(response => response.json())
        //     .then(things => {
        //         props.onThingsLoaded(things)
        //     })

        //  }, [])